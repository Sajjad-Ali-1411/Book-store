ONLINE Book store Data

CREATE DATABASE OnlineBookstore;

DROP TABLE IF EXISTS Books;
CREATE TABLE Books (
Â    Book_ID SERIAL PRIMARY KEY,
Â    Title VARCHAR(100),
Â    Author VARCHAR(100),
Â    Genre VARCHAR(50),
Â    Published_Year INT,
Â    Price NUMERIC(10, 2),
Â    Stock INT
);
DROP TABLE IF EXISTS customers;
CREATE TABLE Customers (
Â    Customer_ID SERIAL PRIMARY KEY,
Â    Name VARCHAR(100),
Â    Email VARCHAR(100),
Â    Phone VARCHAR(15),
Â    City VARCHAR(50),
Â    Country VARCHAR(150)
);
DROP TABLE IF EXISTS orders;
CREATE TABLE Orders (
Â    Order_ID SERIAL PRIMARY KEY,
Â    Customer_ID INT REFERENCES Customers(Customer_ID),
Â    Book_ID INT REFERENCES Books(Book_ID),
Â    Order_Date DATE,
Â    Quantity INT,
Â    Total_Amount NUMERIC(10, 2)
);

-- Import Data into Books Table
COPY Books(Book_ID, Title, Author, Genre, Published_Year, Price, Stock) 
FROM 'C:\Users\Tnluser.PG02LWNZ\Desktop\SQL\SQL_Resume_Project-main\SQL_Resume_Project-main\Books.csv' 
CSV HEADER;

-- Import Data into Customers Table
COPY Customers(Customer_ID, Name, Email, Phone, City, Country) 
FROM 'C:\Users\Tnluser.PG02LWNZ\Desktop\SQL\SQL_Resume_Project-main\SQL_Resume_Project-main\Customers.csv'
CSV HEADER;

-- Import Data into Orders Table
COPY Orders(Order_ID, Customer_ID, Book_ID, Order_Date, Quantity, Total_Amount) 
FROM 'C:\Users\Tnluser.PG02LWNZ\Desktop\SQL\SQL_Resume_Project-main\SQL_Resume_Project-main\Orders.csv' 
CSV HEADER;

	
SELECT * FROM Books;
SELECT * FROM customers;
SELECT * FROM orders;


ðŸŸ¢ Beginner Level

-- 1) Retrieve all books in the "Fiction" genre:

select * from Books
where genre = 'Fiction';


-- 2) Find books published after the year 1950:

select * from Books
where published_year > 1950;


-- 3) List all customers from the Canada:

SELECT * FROM customers
where country = 'Canada';


-- 4) Retrieve the total stock of books available:

SELECT sum(stock) as Total_stock
FROM Books;

-- 5) Show all customers who ordered more than 1 quantity of a book:

select * from orders
where quantity > 1;


ðŸŸ¡ Intermediate Level:

-- 1) Find the details of the most expensive book:

SELECT * FROM Books
ORDER BY Price DESC
LIMIT 1;

-- 2) Retrieve all orders where the total amount exceeds $20:
select * from orders
where total_amount > 20
order by total_amount;


-- 3) Calculate the total revenue generated from all orders:

select sum(total_amount) as Total_revenue from orders;


-- 4) Find the average price of books in the "Fantasy" genre:

select round(avg(price),2) as avg_price
from Books
where genre = 'Fantasy'

-- 5) Show the top 3 most expensive books of 'Fantasy' Genre :

select * from Books
where genre = 'Fantasy'
order by price desc
limit 3


ðŸ”´ Advanced Level:

-- 1) Retrieve the total number of books sold for each genre:

select sum(o.quantity) as Total_books_sold, b.genre
from orders o
join Books b on o.book_id = b.book_id
group by b.genre
order by Total_books_sold desc;


-- 2) List customers who have placed at least 2 orders:

select c.name, o.customer_id, count(o.order_id) as Total_order
from  orders o
join customers c on c.customer_id = o.customer_id
group by c.name, o.customer_id
having count(o.order_id) >=2
order by Total_order;


-- 3) Find the most frequently ordered book:

SELECT o.Book_id, b.title, COUNT(o.order_id) AS ORDER_COUNT
FROM orders o
JOIN books b ON o.book_id=b.book_id
GROUP BY o.book_id, b.title
ORDER BY ORDER_COUNT DESC LIMIT 1;


-- 4) Retrieve the total quantity of books sold by each author:

select b.author, sum(o.quantity) as Total_books_sold
from Books b
join orders o on b.book_id = o.book_id
group by b.author
order by Total_books_sold desc;


-- 5) List the cities where customers who spent over $30 are located:

SELECT DISTINCT c.city, total_amount
FROM orders o
JOIN customers c ON o.customer_id=c.customer_id
WHERE o.total_amount > 30
order by total_amount;


-- 6) Find the customer who spent the most money:

select c.name, sum(o.total_amount) as Total_spend
from customers c
join orders o on c.customer_id = o.customer_id
group by c.customer_id
order by Total_spend desc
limit 1


--7) Calculate the units left in stock after orders (per book):

SELECT b.title,
       b.stock - COALESCE(SUM(o.quantity), 0) AS remaining_stock
FROM books b
LEFT JOIN orders o ON b.book_id = o.book_id
GROUP BY b.book_id, b.title, b.stock
order by remaining_stock ;

Â 
-- 8) Most sold books in each genre

with cte as
(SELECT b.title, b.genre, o.quantity,
DENSE_RANK() OVER(PARTITION BY b.genre order by quantity desc) as rnk
FROM orders o
JOIN books b ON o.book_id = b.book_id)
select title,genre,quantity from cte 
where rnk=1;


-- 9) Total number of orders made by each customer.

select c.name, o.customer_id, count(o.order_id) as Total_order
from  orders o
join customers c on c.customer_id = o.customer_id
group by c.name, o.customer_id
order by Total_order desc;


-- 10) Total revenue by genre:

select b.genre,sum(o.total_amount) as total_revenue
from Books b
join orders o on b.book_id = o.book_id
group by genre
order by total_revenue desc;


-- 11) Books that were never ordered:

SELECT  b.book_id, b.title
FROM books b
LEFT JOIN orders o ON b.book_id = o.book_id
WHERE o.order_id IS NULL;


-- 12) Calculate year-wise revenue:

select extract(year from order_date) as year,
 sum(total_amount) as total_revenue
from orders
group by year;












